import {
  AMM_STARTING_LIQUIDITY,
  BUILDING_CAPACITY,
  BUILDING_COSTS,
  BUILDING_POPULATION,
  BUILDING_RESOURCE_PRODUCED,
  CapacityConfigCategory,
  HYPERSTRUCTURE_CONSTRUCTION_COSTS,
  HYPERSTRUCTURE_CREATION_COSTS,
  HYPERSTRUCTURE_RESOURCE_MULTIPLIERS,
  HYPERSTRUCTURE_TOTAL_COSTS,
  LORDS_LIQUIDITY_PER_RESOURCE,
  QUEST_RESOURCES,
  REALM_MAX_LEVEL,
  REALM_UPGRADE_COSTS,
  RESOURCE_BUILDING_COSTS,
  RESOURCE_INPUTS,
  RESOURCE_OUTPUTS,
  ResourcesIds,
  TROOPS_FOOD_CONSUMPTION,
  TROOPS_STAMINAS,
  WEIGHTS_GRAM,
} from ".";
import { Config } from "../types";

export const FELT_CENTER = 2147483646;
export const WORLD_CONFIG_ID = 999999999n;
export const HYPERSTRUCTURE_CONFIG_ID = 999999992n;
export const U32_MAX = 4294967295;
export const MAX_NAME_LENGTH = 31;
export const ONE_MONTH = 2628000;

// Buildings
export const BASE_POPULATION_CAPACITY = 5;
export const BUILDING_FIXED_COST_SCALE_PERCENT = 5_000; // 5_000/10_000 = 50%
// Points
export const HYPERSTRUCTURE_POINTS_PER_CYCLE = 10;
export const HYPERSTRUCTURE_POINTS_ON_COMPLETION = 2_000_000; // about the amount of points generated by the structure in 2 days
export const HYPERSTRUCTURE_TIME_BETWEEN_SHARES_CHANGE_S = 17280; // 2 days
export const HYPERSTRUCTURE_POINTS_FOR_WIN = 6_320_000;

// Entity Types
export const DONKEY_ENTITY_TYPE = 256;
export const REALM_ENTITY_TYPE = 257;
export const ARMY_ENTITY_TYPE = 258;

export const STAMINA_REFILL_PER_TICK = 20;

export const EternumGlobalConfig: Config = {
  stamina: {
    travelCost: 10,
    exploreCost: 20,
    refillPerTick: STAMINA_REFILL_PER_TICK,
  },
  resources: {
    resourcePrecision: 1000,
    resourceMultiplier: 1000,
    resourceAmountPerTick: 10,
    startingResourcesInputProductionFactor: 4,
    resourceInputs: RESOURCE_INPUTS,
    resourceOutputs: RESOURCE_OUTPUTS,
    resourceWeightsGrams: WEIGHTS_GRAM,
    resourceBuildingCosts: RESOURCE_BUILDING_COSTS,
  },
  banks: {
    name: "Central Bank",
    lordsCost: 1000,
    lpFeesNumerator: 15,
    lpFeesDenominator: 100, // %
    ownerFeesNumerator: 15,
    ownerFeesDenominator: 100, // %
    ownerBridgeFeeOnDepositPercent: 1000, // 10 % using scale of 10_000
    ownerBridgeFeeOnWithdrawalPercent: 1000, // 10 % using scale of 10_000
    ammStartingLiquidity: AMM_STARTING_LIQUIDITY,
    lordsLiquidityPerResource: LORDS_LIQUIDITY_PER_RESOURCE,
  },
  populationCapacity: {
    workerHuts: 5,
    basePopulation: BASE_POPULATION_CAPACITY,
  },
  exploration: {
    reward: 750,
    shardsMinesFailProbability: 99000,
  },
  tick: {
    defaultTickIntervalInSeconds: 1,
    armiesTickIntervalInSeconds: 3600, // 1 hour
  },
  carryCapacityGram: {
    [CapacityConfigCategory.None]: 0,
    [CapacityConfigCategory.Structure]: BigInt(2) ** BigInt(128) - BigInt(1),
    [CapacityConfigCategory.Donkey]: 400_000,
    [CapacityConfigCategory.Army]: 10_000,
    [CapacityConfigCategory.Storehouse]: 3_000_000_000,
  },
  speed: {
    donkey: 6,
    army: 1,
  },
  battle: {
    graceTickCount: 24,
    delaySeconds: 8 * 60 * 60,
  },
  troop: {
    health: 1,
    knightStrength: 1,
    paladinStrength: 1,
    crossbowmanStrength: 1,
    advantagePercent: 1000,
    disadvantagePercent: 1000,
    maxTroopCount: 500_000,
    baseArmyNumberForStructure: 3,
    armyExtraPerMilitaryBuilding: 1,
    // max attacking armies per structure = 6 + 1 defensive army
    maxArmiesPerStructure: 7, // 3 + (3 * 1) = 7 // so they get benefits from at most 3 military buildings
    // By setting the divisor to 8, the max health that can be taken from the weaker army
    // during pillage is 100 / 8 = 12.5% . Adjust this value to change that.
    //
    // The closer the armies are in strength and health, the closer they both
    // get to losing 12.5% each. If an army is far stronger than the order,
    // they lose a small precentage (it goes closer to 0% health loss) while the
    // weak army's loss is closer to 12.5%
    pillageHealthDivisor: 8,

    // 25%
    battleLeaveSlashNum: 25,
    battleLeaveSlashDenom: 100,
    // 1_000. multiply this number by 2 to reduce battle time by 2x,
    // and reduce by 2x to increase battle time by 2x, etc
    battleTimeReductionScale: 1_000,
    troopStaminas: TROOPS_STAMINAS,
    troopFoodConsumption: TROOPS_FOOD_CONSUMPTION,
  },
  mercenaries: {
    troops: {
      knight_count: 1000,
      paladin_count: 1000,
      crossbowman_count: 1000,
    },
    rewards: [
      { resource: ResourcesIds.Wheat, amount: 100 },
      { resource: ResourcesIds.Fish, amount: 200 },
    ],
  },
  settlement: {
    radius: 2000,
    angle_scaled: 0,
    center: 2147483646,
    min_distance: 30,
    max_distance: 50,
    min_scaling_factor_scaled: 1844674407370955161n,
    min_angle_increase: 20,
    max_angle_increase: 40,
  },

  buildings: {
    buildingCapacity: BUILDING_CAPACITY,
    buildingPopulation: BUILDING_POPULATION,
    buildingResourceProduced: BUILDING_RESOURCE_PRODUCED,
    buildingCosts: BUILDING_COSTS,
    buildingFixedCostScalePercent: BUILDING_FIXED_COST_SCALE_PERCENT,
  },

  hyperstructures: {
    hyperstructureCreationCosts: HYPERSTRUCTURE_CREATION_COSTS,
    hyperstructureConstructionCosts: HYPERSTRUCTURE_CONSTRUCTION_COSTS,
    hyperstructureTotalCosts: HYPERSTRUCTURE_TOTAL_COSTS,
    hyperstructureResourceMultipliers: HYPERSTRUCTURE_RESOURCE_MULTIPLIERS,
    hyperstructurePointsPerCycle: HYPERSTRUCTURE_POINTS_PER_CYCLE,
    hyperstructurePointsOnCompletion: HYPERSTRUCTURE_POINTS_ON_COMPLETION,
    hyperstructureTimeBetweenSharesChangeSeconds: HYPERSTRUCTURE_TIME_BETWEEN_SHARES_CHANGE_S,
    hyperstructurePointsForWin: HYPERSTRUCTURE_POINTS_FOR_WIN,
  },

  questResources: QUEST_RESOURCES,
  realmUpgradeCosts: REALM_UPGRADE_COSTS,
  realmMaxLevel: REALM_MAX_LEVEL,
};
